<!DOCTYPE html>
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	<title>Locations on Bing Maps</title>
	<script type="text/javascript" src="dd_XMLParser.js"></script>
	<script type="text/javascript" src="dd_RESTService.js"></script>
	<script type="text/javascript" src="ClientGlobalContext.js.aspx"></script>
	<script type="text/javascript" id="BingMapScript"></script>
	<script type="text/javascript">
		var chartMap = chartMap || {
			Settings: new Object(),
			allPins: new Array(),
			init: function () {
				chartMap.getWindowParameters();    // Sync
				chartMap.loadChartConfig();        // Async
				chartMap.retrieveBingMapAPIKey();  // Async
				chartMap.loadRecords();            // Async
			},
			getWindowParameters: function () {
				var parameters = Xrm.Page.context.getQueryStringParameters();
				var dataParam = chartMap.parseQueryParameters(parameters.data);

				chartMap.entityTypeName = parameters.typename;
				chartMap.chartId = dataParam["visid"];
				chartMap.viewId = dataParam["viewid"];
			},
			loadChartConfig: function () {
				dd_CRMService.Retrieve(
					chartMap.chartId, "SavedQueryVisualization",
					null, null,
					function (result) {
						chartMap.PresentationDescription = JSON.parse(result.PresentationDescription);
						chartMap.DataDescription = JSON.parse(result.DataDescription);

						chartMap.DataDescription.Latitude = (typeof chartMap.DataDescription.LatitudeField === 'string') ? chartMap.DataDescription.LatitudeField.toLowerCase() : "";
						chartMap.DataDescription.Longitude = (typeof chartMap.DataDescription.LongitudeField === 'string') ? chartMap.DataDescription.LongitudeField.toLowerCase() : "";
					},
					function (error) { chartMap.ShowErrorOnMap("There was a problem loading the map configuration"); }
				);
			},
			retrieveBingMapAPIKey: function () {
				dd_CRMService.RetrieveMultiple(
					"Organization",
					"$select=BingMapsApiKey&$top=1",
					function (results) {  //successCallback
						chartMap.Settings.BingKey = results[0].BingMapsApiKey;
						chartMap.loadBingMapScript();
					},
					function (error) { //errorCallback
						chartMap.Settings.BingKey = "";
						chartMap.ShowErrorOnMap("Failed to Retrieve API Key");
					}
				);
			},
			loadBingMapScript: function () {
				var bingMapScript = document.getElementById("BingMapScript");
				bingMapScript.onload = function () { chartMap.loadMap(); };
				bingMapScript.src = location.protocol + "//" + chartMap.DataDescription.BingMapScriptUrl + ((location.protocol === "https:") ? "&s=1" : "");
			},
			loadMap: function () {
				if (typeof Microsoft === "undefined" || !Microsoft.Maps || !Microsoft.Maps.loadModule) {
					setTimeout(chartMap.loadMap, 10);
					return;
				}

				Microsoft.Maps.loadModule('Microsoft.Maps.Search', { callback: chartMap.initBingMap });
				Microsoft.Maps.loadModule('Microsoft.Maps.Themes.BingTheme', { callback: chartMap.initBingMap });

				chartMap.registerModule();
			},
			registerModule: function() {
				if (!chartMap.PresentationDescription) {
					setTimeout(chartMap.registerModule, 10);
					return;
				}

				if (chartMap.PresentationDescription.MapType == 1) {
					Microsoft.Maps.registerModule("PointBasedClusteringModule", "dd_PointBasedClustering.js");
					Microsoft.Maps.loadModule("PointBasedClusteringModule", { callback: chartMap.initPointMap });
				}
				else if (chartMap.PresentationDescription.MapType == 2) {
					Microsoft.Maps.registerModule("HeatMapModule", "dd_HeatMapModule.js");
					Microsoft.Maps.loadModule("HeatMapModule", { callback: chartMap.initHeatMap });
				}
			},
			initBingMap: function () {
				if (!chartMap.Settings.BingKey) {
					setTimeout(chartMap.initBingMap, 10);
					return;
				}

				if (Microsoft.Maps.Search && Microsoft.Maps.Themes) {
					chartMap.BingMap = chartMap.BingMap || new Microsoft.Maps.Map(document.getElementById("mapDiv"), {
						credentials: chartMap.Settings.BingKey,
						enableClickableLogo: false,
						showDashboard: false,
						enableSearchLogo: false,
						theme: new Microsoft.Maps.Themes.BingTheme()
					});
					chartMap.searchManager = new Microsoft.Maps.Search.SearchManager(chartMap.BingMap);
					chartMap.BingMap.setView({ zoom: chartMap.DataDescription.CenterZoom, center: new Microsoft.Maps.Location(chartMap.DataDescription.CenterLat, chartMap.DataDescription.CenterLong) });
				}
			},
			initPointMap: function () {
				if (!chartMap.BingMap) {
					setTimeout(chartMap.initPointMap, 10);
					return;
				}

				chartMap.clusterLayer = new PointBasedClusteredEntityCollection(
					chartMap.BingMap,
					{
						singlePinCallback: chartMap.createPin,
						clusteredPinCallback: chartMap.createClusteredPin,
						clusterRadius: chartMap.PresentationDescription.EnableClustering ? chartMap.PresentationDescription.ClusterRadius : -1,
						callback: chartMap.onDrawMapComplete
					}
				);
			},
			initHeatMap: function () {
				if (!chartMap.BingMap) {
					setTimeout(chartMap.initPointMap, 10);
					return;
				}

				chartMap.heatLayer = new HeatMapLayer(
					chartMap.BingMap,
					[],
					{
						intensity: chartMap.PresentationDescription.Intensity,
						radius: chartMap.PresentationDescription.Radius,
						unit: chartMap.PresentationDescription.RadiusUnits,
						colourgradient: {
							"0.00": chartMap.PresentationDescription.Colour1,
							"0.25": chartMap.PresentationDescription.Colour2,
							"0.50": chartMap.PresentationDescription.Colour3,
							"0.75": chartMap.PresentationDescription.Colour4,
							"1.00": chartMap.PresentationDescription.Colour5
						},
						callback: chartMap.onDrawMapComplete
					}
				);
			},
			loadRecords: function () {
				if (!chartMap.DataDescription) {
					setTimeout(chartMap.loadRecords, 10);
					return;
				}

				var FetchXml = "";
				if (parent.effectiveFetchXml && Object.prototype.toString.call(parent.effectiveFetchXml) == "[object HTMLDivElement]") {  // Web
					FetchXml = chartMap.buildFetchXML(parent.effectiveFetchXml.getAttribute("value"));
				}
				else if (parent.$find("crmGrid")) {  // Outlook
					FetchXml = chartMap.buildFetchXML(parent.$find("crmGrid").GetParameter("effectiveFetchXml"));
				}
				else  // Retrieves the FetchXml using the provided viewId.  This is the only method that is technically supported, but it does not maintain user-filtered results.  This was added to support "Chart-Only" subgrids on Forms and Dashboards, but it also makes a good fallback if the unsupported methods fail.
				{
					FetchXml = chartMap.GetFetchXmlFromViewId(chartMap.viewId);
				}

				dd_CRMService.RetrieveFetchXml(FetchXml, chartMap.getPinData, function (error) { chartMap.ShowErrorOnMap("There was a problem opening the record list"); });
			},
			buildFetchXML: function (fetchXMLString) {
				var result = chartMap.DataDescription.fetchXML;
				if (!chartMap.PresentationDescription.ShowAllRecords) {  // If showallrecords is true, then it will already be defaulted to "count=5000" and "page=1"
					result = result.replace('count="250"', fetchXMLString.match(/count=".*?"/));
					result = result.replace('page="1"', fetchXMLString.match(/page=".*?"/));
				}

				result = result.replace("<order/>", fetchXMLString.match(/<order.*?\/>/));
				result = result.replace("<filter/>", fetchXMLString.match(/<filter.*<\/filter>/));  // TODO: add support for link-entity filters

				return result;
			},
			GetFetchXmlFromViewId: function (viewId) {
				var result = dd_CRMService.Retrieve(viewId, "SavedQuery", null, null);
				if (result.FetchXml)
					return result.FetchXml;
				else
					chartMap.ShowErrorOnMap("There was a problem reading the record list");
			},
			getPinData: function (entityList) {
				var pinData = function (crmEntity) {  // Class to store pinData as it gets passed around
					this.Name = crmEntity[chartMap.DataDescription.NameField];
					this.Id = crmEntity.id;
					this.Address = crmEntity.compositeAddress;
					this.EntityType = chartMap.entityTypeName;
					this.latitude = crmEntity[chartMap.DataDescription.Latitude];
					this.longitude = crmEntity[chartMap.DataDescription.Longitude];
					this.weight = crmEntity[chartMap.DataDescription.NumericField] || 0;
				};
				var mapConfig = chartMap.DataDescription;
				chartMap.geocodeCompleted = 0;
				chartMap.geocodeTotal = entityList.length;

				for (var e in entityList) {
					var entity = entityList[e];

					entity.compositeAddress = [ entity[mapConfig.AddressField], entity[mapConfig.CityField], entity[mapConfig.StateField], entity[mapConfig.CountryField], entity[mapConfig.PostCodeField] ].filter(function (a) { return a != undefined; }).join(", ");

					if (entity[mapConfig.Longitude] && entity[mapConfig.Latitude]) {  // We already have the coordinates
						chartMap.allPins.push(new pinData(entity));
						chartMap.geocodeComplete();
					}
					else {   // Must perform geocoding
						if (entity.compositeAddress) {  // Perform Geocoding
							chartMap.sendGeocodeRequest(entity.compositeAddress, new pinData(entity));
						}
						else {  // Skip records with no address details
							chartMap.geocodeComplete();
						}
					}
				}
			},
			sendGeocodeRequest: function (searchString, pinData) {
				if (!chartMap.searchManager) {
					setTimeout(chartMap.sendGeocodeRequest, 10, searchString, pinData);
					return;
				}

				chartMap.searchManager.geocode({
					where: searchString,
					count: 1,
					callback: chartMap.onGeocodeSuccess,
					errorCallback: chartMap.onGeocodeFail,
					userData: pinData
				});
			},
			onGeocodeSuccess: function (result, pinData) {
				var topResult = result.results && result.results[0];
				if (topResult) {
					pinData.latitude = topResult.location.latitude;
					pinData.longitude = topResult.location.longitude;

					chartMap.allPins.push(pinData);

					if (chartMap.PresentationDescription.EnableCaching) {
						chartMap.updateCoordinates(pinData.Id, pinData.EntityType, pinData.longitude, pinData.latitude);
					}
				}

				chartMap.geocodeComplete();
			},
			onGeocodeFail: function (result, pinData) {
				chartMap.geocodeComplete();
			},
			geocodeComplete: function () {
				if (++chartMap.geocodeCompleted >= chartMap.geocodeTotal) {
					if (chartMap.PresentationDescription.MapType == 1) {
						chartMap.addPinsToMap();
					}
					else if (chartMap.PresentationDescription.MapType == 2) {
						chartMap.generateHeat();
					}

					chartMap.BingMap.setView({ bounds: Microsoft.Maps.LocationRect.fromLocations(chartMap.allPins) });
				}
			},
			addPinsToMap: function () {
				if (!chartMap.clusterLayer) {
					setTimeout(chartMap.addPinsToMap, 10);
					return;
				}
				chartMap.clusterLayer.SetData(chartMap.allPins);
			},
			generateHeat: function () {
				if (!chartMap.heatLayer) {
					setTimeout(chartMap.generateHeat, 10);
					return;
				}

				if (chartMap.PresentationDescription.HeatMapType && chartMap.PresentationDescription.HeatMapType == 2) {
					chartMap.allPins.Range = chartMap.PresentationDescription.IntensityRange;
				}
				else {
					chartMap.allPins.Range = 0;
				}

				chartMap.calculateRange();
				chartMap.heatLayer.SetPoints(chartMap.allPins);
			},
			createPin: function (data, pinInfo) {
				var pin = {};
				pin.pin = new Microsoft.Maps.Pushpin(pinInfo.center, { typeName: chartMap.PresentationDescription.PinSize });
				pin.infobox = new Microsoft.Maps.Infobox(
					pinInfo.center,
					{
						title: data.Name,
						pushpin: pin.pin,
						description: data.Address,
						titleClickHandler: function () { Xrm.Utility.openEntityForm(data.EntityType, data.Id); }
					});

				return pin;
			},
			createClusteredPin: function (clusterInfo) {
				var pin = { Description: "" };

				for (var i in clusterInfo.dataIndices) {
					pin.Description += '<a href="#" onclick="javascript:Xrm.Utility.openEntityForm(\'' + chartMap.entityTypeName + '\',\'' + chartMap.allPins[clusterInfo.dataIndices[i]].Id + '\');">' + chartMap.allPins[clusterInfo.dataIndices[i]].Name + "</a><br />";
				}
				pin.pin = new Microsoft.Maps.Pushpin(clusterInfo.center, { text: clusterInfo.dataIndices.length.toString() });
				pin.infobox = new Microsoft.Maps.Infobox(clusterInfo.center, { title: chartMap.PresentationDescription.ClusterTitle, pushpin: pin.pin, description: pin.Description });

				return pin;
			},
			updateCoordinates: function (id, type, longitude, latitude) {
				var record = {};
				record[chartMap.DataDescription.LatitudeField] = latitude;
				record[chartMap.DataDescription.LongitudeField] = longitude;

				dd_CRMService.Update(id, record, chartMap.DataDescription.EntitySchemaName, null, null);
			},
			calculateRange: function () {
				if (chartMap.allPins.Range == 1) {  // Calculated Range
					var weightArray = chartMap.allPins.map(function (x) { return x.weight; });

					if (chartMap.PresentationDescription.IntensityCalculation == 2) {  // Standard Deviation
						var STDev = chartMap.stdDev.getStandardDev(weightArray, 2);
						var Mean = chartMap.stdDev.getAverage(weightArray, 2);

						chartMap.allPins.Max = Mean + (STDev * chartMap.PresentationDescription.Deviations);
						chartMap.allPins.Min = Mean - (STDev * chartMap.PresentationDescription.Deviations);
					}
					else {  // Full Range
						chartMap.allPins.Max = Math.max.apply(null, weightArray);
						chartMap.allPins.Min = Math.min.apply(null, weightArray)
					}

					if (chartMap.allPins.Min < 0) {
						chartMap.allPins.Min = 0;
					}
				}
				else {  // Fixed range
					chartMap.allPins.Max = chartMap.PresentationDescription.MaxValue;
					chartMap.allPins.Min = chartMap.PresentationDescription.MinValue;
				}
			},
			ShowErrorOnMap: function (errorMessage) {
				errorMessage = errorMessage || "There was a problem loading this map.";
				if (chartMap.BingMap) {
					if (chartMap.BingMap.entities) {
						chartMap.BingMap.entities.clear();
					}
					var newElement = document.createElement("div");
					newElement.style.cssText = "position:absolute; width:100%; top:50%; text-Align:center";

					var innerElement = document.createElement("div");
					innerElement.innerHTML = "\u003ch2\u003eSorry :(\u003c/h2\u003e" + errorMessage + "\u003cbr/\u003ePlease contact your system administrator";
					innerElement.style.cssText = "background: #f8f7f5; padding:10px; color: #000;";
					newElement.appendChild(innerElement);
					chartMap.BingMap.getRootElement().appendChild(newElement);
				}
			},
			parseQueryParameters: function (query) {
				var parametersDictionary = new Array();
				var parameters = query.split('&');
				for (var i in parameters) {
					var keyValuePair = parameters[i].split('=');
					parametersDictionary[unescape(keyValuePair[0])] = unescape(keyValuePair[1]);
				}
				return parametersDictionary;
			},
			stdDev: new function () {  // Helper for working with standard deviation
				var getNumWithSetDec = function (num, numOfDec) {
					var pow10s = Math.pow(10, numOfDec || 0);
					return (numOfDec) ? Math.round(pow10s * num) / pow10s : num;
				},
				getAverage = function (numArr, numOfDec) {
					var i = numArr.length, sum = 0;
					while (i--) {
						sum += numArr[i];
					}
					return getNumWithSetDec((sum / numArr.length), numOfDec);
				},
				getVariance = function (numArr, numOfDec) {
					var avg = getAverage(numArr, numOfDec), i = numArr.length, v = 0;
					while (i--) {
						v += Math.pow((numArr[i] - avg), 2);
					}
					v /= numArr.length;
					return getNumWithSetDec(v, numOfDec);
				},
				getStandardDev = function (numArr, numOfDec) {
					var stdDev = Math.sqrt(getVariance(numArr, numOfDec));
					return getNumWithSetDec(stdDev, numOfDec);
				};

				return {
					getStandardDev: getStandardDev,
					getAverage: getAverage
				}
			}
		};
	</script>
</head>
<body onload="chartMap.init()" style="overflow: hidden;">
	<div class="MicrosoftMap BingTheme MapTypeId_m medium" id="mapDiv"></div>
</body>
</html>
